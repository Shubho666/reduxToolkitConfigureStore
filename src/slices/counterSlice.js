import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'

const initialState = { value: 0 }

const fetchCount = (amount = 1) => {
    return new Promise((resolve) =>
        setTimeout(() => resolve({ data: amount }), 5500)
    );
}

export const incrementAsync = createAsyncThunk(
    'counter/fetchCount',
    async (amount) => {
        const response = await fetchCount(amount);
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

const counterSlice = createSlice({
    name: 'counter',
    initialState,
    reducers: {
        increment: {
            reducer: (state, action) => {
                state.value += action.payload
            },
            prepare: (val) => {
                return { payload: val || 1 }
            }
        },
        // [incrementAsync.fulfilled]: (state, action) => {
        //     // state.status = 'idle';
        //     state.value += action.payload;
        //     console.log('here',state.value);
        // },
        decrement(state) {
            state.value--
        },
        reset(state) {
            state.value = 0
        }
        // incrementByAmount(state, action) {
        //   state.value += action.payload
        // },
    },
    //object notation can also pass as builder
    extraReducers: {
        [incrementAsync.fulfilled]: (state, action) => {
            // state.status = 'idle';
            state.value += action.payload;
            console.log('here', state.value);
        }
    },
    // // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //     builder
    //         .addCase(incrementAsync.pending, (state) => {
    //             state.status = 'loading';
    //         })
    //         .addCase(incrementAsync.fulfilled, (state, action) => {
    //             state.status = 'idle';
    //             state.value += action.payload;
    //         });
    // },
})

export const { increment, decrement, reset } = counterSlice.actions;
export default counterSlice.reducer;